[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-pyboy"
version = "0.1.0"
description = "MCP server that enables LLMs to interact with Game Boy games through PyBoy emulation"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: AsyncIO",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"

# Core Dependencies
dependencies = [
    "mcp>=1.0.0",              # MCP protocol implementation
    "pyboy>=2.0.0",            # Game Boy emulator engine
    "fastapi>=0.104.0",        # Web framework with WebSocket support
    "uvicorn>=0.24.0",         # ASGI server
    "pydantic>=2.0.0",         # Data validation and settings
    "pillow>=10.0.0",          # Image processing for screenshots
    "aiofiles>=23.0.0",        # Async file operations
    "jsonschema>=4.0.0",       # JSON Schema validation
    "structlog>=23.0.0",       # Structured logging
    "click>=8.0.0",            # CLI framework
]

# Optional dependencies for different features
[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",           # Testing framework
    "pytest-asyncio>=0.21.0",  # Async test support
    "pytest-mock>=3.11.0",     # Mocking for tests
    "pytest-cov>=4.1.0",       # Coverage reporting
    "black>=23.0.0",           # Code formatting
    "ruff>=0.1.0",             # Linting
    "mypy>=1.7.0",             # Type checking
    "pre-commit>=3.0.0",       # Pre-commit hooks
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-mock>=3.11.0",
    "pytest-cov>=4.1.0",
]
docs = [
    "mkdocs>=1.5.0",           # Documentation generator
    "mkdocs-material>=9.0.0",  # Material theme
    "mkdocstrings[python]>=0.24.0",  # API documentation
]

[project.scripts]
mcp-pyboy = "mcp_pyboy.cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/mcp-pyboy"
Repository = "https://github.com/yourusername/mcp-pyboy"
Issues = "https://github.com/yourusername/mcp-pyboy/issues"
Documentation = "https://yourusername.github.io/mcp-pyboy"

# Hatch configuration
[tool.hatch.build.targets.wheel]
packages = ["src/mcp_pyboy"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "pyboy.*",
    "mcp.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/mcp_pyboy",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]